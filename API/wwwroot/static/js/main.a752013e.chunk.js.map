{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/CategoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/AcitivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","startsWith","userStore","logOut","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","refreshToken","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowing","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingIntial","console","log","loadActivity","getActivity","runInAction","state","createActivity","activityFormValues","attendee","newActivity","hostUsername","attendees","updateActivity","updatedActivity","deleteActivity","updateAttendance","isGoing","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesSortByDate","reduce","tempActivities","format","some","isHost","host","find","x","Date","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","activities","UserStore","refreshTokenTimeout","name","creds","setToken","startRefreshTokenTimer","modalStore","closeModal","window","localStorage","removeItem","getUser","stopRefreshTokenTimer","jwtToken","atob","split","timeout","exp","now","setTimeout","clearTimeout","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","Divider","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","event","setValue","onBlur","setTouched","CategoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.a752013e.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T>{\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { Photo, Profile, UserActivity } from '../models/profile';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { PaginatedResult } from '../models/pagination';\r\nimport { store } from '../stores/store';\r\n\r\nconst sleep = (delay: number) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(resolve, delay)\r\n  })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n  const token = store.commonStore.token;\r\n  if (token)\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n  if (process.env.NODE_ENV === 'development') await sleep(500)\r\n\r\n  const pagination = response.headers['pagination'];\r\n  if (pagination) {\r\n    response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n    return response as AxiosResponse<PaginatedResult<any>>;\r\n  }\r\n  return response;\r\n  //any thing that is not 200 is going\r\n  // to be error response and we get rejectd\r\n}, (error: AxiosError) => {\r\n  //we may not have error.response so with  \"!\"  \r\n  //we say typescript we know what we are doing\r\n  const { data, status, config, headers } = error.response!;\r\n  switch (status) {\r\n    case 400:\r\n      if (typeof data === 'string') {\r\n        toast.error(data);\r\n      }\r\n      if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n        history.push('/not-found')\r\n      }\r\n      if (data.errors) {\r\n        const modalStateErrors = [];\r\n        for (const key in data.errors) {\r\n          if (data.errors[key]) {\r\n            modalStateErrors.push(data.errors[key]);\r\n          }\r\n        }\r\n        throw modalStateErrors.flat();\r\n      }\r\n      break;\r\n    case 401:\r\n      if (status === 401 && headers['www-authenticate'].startsWith('Bearer error=\"invalid_token\"')) {\r\n        store.userStore.logOut();\r\n        toast.error('Session expired - please login again');\r\n      }\r\n      break;\r\n    case 404:\r\n      history.push('not-found');\r\n      break;\r\n    case 500:\r\n      store.commonStore.setServerError(data);\r\n      history.push('/server-error');\r\n      break;\r\n  }\r\n  return Promise.reject(error);\r\n});\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n  get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n  post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n  put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n  del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n  list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', { params })\r\n    .then(responseBody),\r\n  details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n  create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n  update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n  delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n  attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n  current: () => requests.get<User>('/account'),\r\n  // request with UserFormValues and recieve User\r\n  login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n  register: (user: UserFormValues) => requests.post<User>('/account/register', user),\r\n  refreshToken: () => requests.post<User>('/account/refreshToken', {})\r\n}\r\n\r\nconst Profiles = {\r\n  get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n  //upload image, we need to get form data and send to our api\r\n  uploadPhoto: (file: Blob) => {\r\n    let formData = new FormData();\r\n    formData.append('File', file);  //'File' name should match to name in backend API\r\n    return axios.post<Photo>('photos', formData, {\r\n      headers: { 'Content-type': 'multipart/form-data' }\r\n    });\r\n  },\r\n  setMainPhoto: (id: string) => requests.post(`/photos/${id}/setmain`, {}),\r\n  deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n  //We need to use Partial<Profile> for the type here as we are only \r\n  //allowing the user to update 2 of the properties contained in the Profile type.\r\n  updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\n  updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n  listFollowing: (username: string, predicate: string) =>\r\n    requests.get<Profile[]>(`/follow/${username}?predicate=` + predicate),\r\n  listActivities: (username: string, predicate: string) =>\r\n    requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=` + predicate)\r\n}\r\n\r\nconst agent = {\r\n  Activities,\r\n  Account,\r\n  Profiles\r\n}\r\n\r\nexport default agent;\r\n","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n  id: string;\r\n  title: string;\r\n  date: Date | null;\r\n  description: string;\r\n  category: string;\r\n  city: string;\r\n  venue: string;\r\n  hostUsername: string;\r\n  isCancelled: boolean;\r\n  isGoing: boolean;\r\n  isHost: boolean;\r\n  host?: Profile;\r\n  attendees: Profile[];\r\n}\r\n\r\nexport class Activity implements Activity {\r\n  constructor(init?: ActivityFormValues) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n  id?: string = undefined;\r\n  title: string = '';\r\n  category: string = '';\r\n  description: string = '';\r\n  date: Date | null = null;\r\n  city: string = '';\r\n  venue: string = '';\r\n\r\n  constructor(activity?: ActivityFormValues) {\r\n    if (activity) {\r\n      this.id = activity.id;\r\n      this.title = activity.title;\r\n      this.category = activity.category;\r\n      this.description = activity.description;\r\n      this.date = activity.date;\r\n      this.city = activity.city;\r\n      this.venue = activity.venue;\r\n    }\r\n  }\r\n}","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { format } from \"date-fns\";\r\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\n\r\nexport default class ActivityStore {\r\n  activityRegistry = new Map<string, Activity>();\r\n  selectedActivity: Activity | undefined = undefined;\r\n  editMode = false;\r\n  loading = false;\r\n  loadingInitial = false;\r\n  pagination: Pagination | null = null;\r\n  pagingParams = new PagingParams();\r\n  predicate = new Map().set('all', true);\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n\r\n    //Reaction\r\n    reaction(\r\n      () => this.predicate.keys(),\r\n      () => {\r\n        this.pagingParams = new PagingParams();\r\n        this.activityRegistry.clear();\r\n        this.loadActivities();\r\n      }\r\n    );\r\n  }\r\n\r\n  setPagingParams = (pagingParams: PagingParams) => {\r\n    this.pagingParams = pagingParams;\r\n  }\r\n\r\n  setPredicate = (predicate: string, value: string | Date) => {\r\n    const resetPredicate = () => {\r\n      this.predicate.forEach((value, key) => {\r\n        if (key !== 'startDate') this.predicate.delete(key);\r\n      })\r\n    }\r\n\r\n    switch (predicate) {\r\n      case 'all':\r\n        resetPredicate();\r\n        this.predicate.set('all', true);\r\n        break;\r\n      case 'isGoing':\r\n        resetPredicate();\r\n        this.predicate.set('isGoing', true);\r\n        break;\r\n      case 'isHost':\r\n        resetPredicate();\r\n        this.predicate.set('isHost', true);\r\n        break;\r\n      case 'startDate':\r\n        this.predicate.delete('startDate')\r\n        this.predicate.set('startDate', value);\r\n        break;\r\n    }\r\n  }\r\n\r\n  //computed property\r\n  get axiosParams() {\r\n    const params = new URLSearchParams();\r\n    params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n    params.append('pageSize', this.pagingParams.pageSize.toString());\r\n    this.predicate.forEach((value, key) => {\r\n      if (key === 'startDate') {\r\n        params.append(key, (value as Date).toISOString());\r\n      } else {\r\n        params.append(key, value);\r\n      }\r\n    })\r\n    return params;\r\n  }\r\n\r\n\r\n  //computed property\r\n  get activitiesSortByDate() {\r\n    return Array.from(this.activityRegistry.values())\r\n      .sort((a, b) => a.date!.getTime() - b.date!.getTime());\r\n  }\r\n\r\n  //computed property, grouping activities by date\r\n  get groupedActivities() {\r\n    return Object.entries(\r\n      // help : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\r\n      this.activitiesSortByDate.reduce((tempActivities, activity) => {\r\n        const date = format(activity.date!, 'dd MMM yyyy');\r\n        tempActivities[date] = tempActivities[date] ? [...tempActivities[date], activity] : [activity];\r\n        return tempActivities;\r\n      }, {} as { [key: string]: Activity[] })\r\n    )\r\n  }\r\n\r\n  loadActivities = async () => {\r\n    try {\r\n      this.loadingInitial = true;\r\n      const result = await agent.Activities.list(this.axiosParams);\r\n      result.data.forEach(activity => {\r\n        this.setActivity(activity);\r\n      });\r\n      this.setPagination(result.pagination);\r\n      this.setLoadingIntial(false);\r\n    } catch (error) {\r\n      console.log(error);\r\n      this.setLoadingIntial(false);\r\n    }\r\n  }\r\n\r\n  setPagination = (pagination: Pagination) => {\r\n    this.pagination = pagination;\r\n  }\r\n\r\n  loadActivity = async (id: string) => {\r\n    let activity = this.getActivity(id);\r\n    if (activity) {\r\n      this.selectedActivity = activity;\r\n      return activity;\r\n    } else {\r\n      this.loadingInitial = true;\r\n      try {\r\n        activity = await agent.Activities.details(id);\r\n        this.setActivity(activity);\r\n        runInAction(() => this.selectedActivity = activity);\r\n        this.setLoadingIntial(false);\r\n        return activity;\r\n      } catch (error) {\r\n        console.log(error);\r\n        this.setLoadingIntial(false);\r\n      }\r\n    }\r\n  }\r\n\r\n  private setActivity(activity: Activity) {\r\n    const user = store.userStore.user;\r\n    if (user) {\r\n      activity.isGoing = activity.attendees!.some(\r\n        a => a.username === user.username\r\n      );\r\n      activity.isHost = activity.hostUsername === user.username;\r\n      activity.host = activity.attendees?.find(x => x.username === activity.hostUsername)\r\n    }\r\n    activity.date = new Date(activity.date!);\r\n    this.activityRegistry.set(activity.id, activity);\r\n  }\r\n\r\n  private getActivity = (id: string) => {\r\n    return this.activityRegistry.get(id);\r\n  }\r\n\r\n  setLoadingIntial = (state: boolean) => {\r\n    this.loadingInitial = state;\r\n  }\r\n\r\n  createActivity = async (activityFormValues: ActivityFormValues) => {\r\n    const user = store.userStore.user;\r\n    const attendee = new Profile(user!);\r\n    try {\r\n      await agent.Activities.create(activityFormValues);\r\n      const newActivity = new Activity(activityFormValues);\r\n      newActivity.hostUsername = user!.username;\r\n      newActivity.attendees = [attendee];\r\n      this.setActivity(newActivity);\r\n      runInAction(() => this.selectedActivity = newActivity)\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  updateActivity = async (activityFormValues: ActivityFormValues) => {\r\n    try {\r\n      await agent.Activities.update(activityFormValues);\r\n      runInAction(() => {\r\n        if (activityFormValues.id) {\r\n          //spread operator\r\n          let updatedActivity = { ...this.getActivity(activityFormValues.id), ...activityFormValues }\r\n          this.activityRegistry.set(activityFormValues.id, updatedActivity as Activity);\r\n          this.selectedActivity = updatedActivity as Activity;\r\n        }\r\n      })\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  deleteActivity = async (id: string) => {\r\n    this.loading = true;\r\n    try {\r\n      await agent.Activities.delete(id);\r\n      runInAction(() => {\r\n        this.activityRegistry.delete(id);\r\n        this.loading = false;\r\n      })\r\n    } catch (error) {\r\n      console.log(error);\r\n      runInAction(() => this.loading = false)\r\n    }\r\n  }\r\n\r\n  updateAttendance = async () => {\r\n    const user = store.userStore.user;\r\n    this.loading = true;\r\n    try {\r\n      await agent.Activities.attend(this.selectedActivity!.id);\r\n      if (this.selectedActivity?.isGoing) {\r\n        this.selectedActivity.attendees =\r\n          this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n        this.selectedActivity.isGoing = false;\r\n      } else {\r\n        const attendee = new Profile(user!);\r\n        this.selectedActivity?.attendees?.push(attendee);\r\n        this.selectedActivity!.isGoing = true;\r\n      }\r\n      this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n      runInAction(() => this.loading = false)\r\n    }\r\n  }\r\n\r\n  cancelActivityToggle = async () => {\r\n    this.loading = true;\r\n    try {\r\n      await agent.Activities.attend(this.selectedActivity!.id);\r\n      runInAction(() => {\r\n        this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n        this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n      })\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n      runInAction(() => this.loading = false)\r\n    }\r\n  }\r\n\r\n  clearSelectedActivity = () => {\r\n    this.selectedActivity = undefined;\r\n  }\r\n\r\n  updateAttendeeFollowing = (username: string) => {\r\n    this.activityRegistry.forEach(activity => {\r\n      activity.attendees.forEach(attendee => {\r\n        if (attendee.username === username) {\r\n          attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n          attendee.following = !attendee.following;\r\n        }\r\n      })\r\n    })\r\n  }\r\n}\r\n","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport agent from \"../api/agent\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        //mobx reaction\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    //computed propery\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = { ...this.profile, ...profile as Profile };\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        //follow parameter says what we are going to do \r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.username &&\r\n                    this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowing(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingActivities = false);\r\n        }\r\n    }\r\n\r\n\r\n}","\r\nimport { makeAutoObservable, runInAction } from 'mobx';\r\nimport { history } from '../..';\r\nimport agent from '../api/agent';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { store } from './store';\r\n\r\nexport default class UserStore {\r\n  user: User | null = null;\r\n  refreshTokenTimeout: any;\r\n\r\n  constructor() {\r\n    makeAutoObservable(this)\r\n  }\r\n\r\n  //computed property, !! converts to boolean\r\n  get isLoggedIn() {\r\n    return !!this.user;\r\n  }\r\n\r\n  setImage = (image: string) => {\r\n    if (this.user) this.user.image = image;\r\n  }\r\n\r\n  setDisplayName = (name: string) => {\r\n    if (this.user) this.user.displayName = name;\r\n  }\r\n\r\n  login = async (creds: UserFormValues) => {\r\n    try {\r\n      const user = await agent.Account.login(creds);\r\n      store.commonStore.setToken(user.token);\r\n      this.startRefreshTokenTimer(user);\r\n      runInAction(() => this.user = user);\r\n      history.push('/activities');\r\n      store.modalStore.closeModal();\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  logOut = () => {\r\n    store.commonStore.setToken(null);\r\n    window.localStorage.removeItem('jwt');\r\n    this.user = null;\r\n    history.push('/');\r\n  }\r\n\r\n  getUser = async () => {\r\n    try {\r\n      const user = await agent.Account.current();\r\n      store.commonStore.setToken(user.token);\r\n      runInAction(() => this.user = user);\r\n      this.startRefreshTokenTimer(user);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  register = async (creds: UserFormValues) => {\r\n    try {\r\n      const user = await agent.Account.register(creds);\r\n      store.commonStore.setToken(user.token);\r\n      runInAction(() => this.user = user);\r\n      history.push('/activities');\r\n      store.modalStore.closeModal();\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  refreshToken = async () => {\r\n    this.stopRefreshTokenTimer();\r\n    try {\r\n      const user = await agent.Account.refreshToken();\r\n      runInAction(() => this.user = user);\r\n      store.commonStore.setToken(user.token);\r\n      this.startRefreshTokenTimer(user);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  private startRefreshTokenTimer(user: User) {\r\n    const jwtToken = JSON.parse(atob(user.token.split('.')[1])); //atob for decoding token\r\n    const expires = new Date(jwtToken.exp * 1000);\r\n    const timeout = expires.getTime() - Date.now() - (60 * 1000); //set timeout to 60 seconds before expire \r\n    this.refreshTokenTimeout = setTimeout(this.refreshToken, timeout);\r\n  }\r\n\r\n  private stopRefreshTokenTimer() {\r\n    clearTimeout(this.refreshTokenTimeout);\r\n  }\r\n\r\n}\r\n","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n  activityStore: ActivityStore;\r\n  commonStore: CommonStore;\r\n  userStore: UserStore;\r\n  modalStore: ModalStore;\r\n  profileStore: ProfileStore;\r\n  commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n  activityStore: new ActivityStore(),\r\n  commonStore: new CommonStore(),\r\n  userStore: new UserStore(),\r\n  modalStore: new ModalStore(),\r\n  profileStore: new ProfileStore(),\r\n  commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\n//create react hook\r\nexport function useStore() {\r\n  return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n  error: ServerError | null = null;\r\n  token: string | null = window.localStorage.getItem('jwt');\r\n  appLoaded = false;\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n\r\n    //reactions in mobx, this reaction is called after token is changed\r\n    reaction(\r\n      () => this.token,\r\n      token => {\r\n        if (token) {\r\n          // store token in browser local storage\r\n          window.localStorage.setItem('jwt', token);\r\n        } else {\r\n          window.localStorage.removeItem('jwt');\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  setServerError = (error: ServerError) => {\r\n    this.error = error;\r\n  }\r\n\r\n  setToken = (token: string | null) => {\r\n    this.token = token;\r\n  }\r\n\r\n  setAppLoaded = () => {\r\n    this.appLoaded = true;\r\n  }\r\n}","import { makeAutoObservable } from \"mobx\";\r\n\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity !== null) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(error =>\r\n                console.log('error establishing hub connection: ' + error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z'); //\"Z\"for utc datetime \r\n                    });\r\n                    this.comments = comments;\r\n                })\r\n            });\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment); //\"unshift\" place comment at the start of array\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    stopConnection = () => {\r\n        this.hubConnection?.stop().catch(error =>\r\n            console.log('error stopping hub connection: ' + error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Dropdown, Image, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\nexport default observer(function NavBar() {\r\n  const { userStore: { user, logOut } } = useStore();\r\n\r\n  return (\r\n    <Menu inverted fixed='top'>\r\n      <Container>\r\n        <Menu.Item as={NavLink} to='/' exact header>\r\n          <img src='/assets/logo.png' alt='logo' style={{ marginRight: '10px' }} />\r\n          Reactivities\r\n        </Menu.Item>\r\n        <Menu.Item as={NavLink} to='/activities' name='Activities' />\r\n        <Menu.Item as={NavLink} to='/errors' name='Errors' />\r\n        <Menu.Item>\r\n          <Button as={NavLink} to='/createActivity' positive content='Create activity' />\r\n        </Menu.Item>\r\n        <Menu.Item position='right'>\r\n          <Image src={user?.image || 'assets/user.png'} avatar spaced='right' />\r\n          <Dropdown pointing='top left' text={user?.displayName}>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item as={Link} to={`/profiles/${user?.username}`}\r\n                text='My Profile' icon='user' />\r\n              <Dropdown.Item onClick={logOut} text='Logout' icon='power' />\r\n            </Dropdown.Menu>\r\n                  </Dropdown>\r\n        </Menu.Item>\r\n      </Container>\r\n    </Menu>\r\n  )\r\n})","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport Calendar from 'react-calendar'\r\nimport { Header, Menu } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\n\r\nexport default observer(function ActivityFilters() {\r\n  const { activityStore: { predicate, setPredicate } } = useStore();\r\n\r\n  return (\r\n    <>\r\n      <Menu vertical size='large' style={{ width: '100%', marginTop: 26 }}>\r\n        <Header icon='filter' attached color='teal' content='Filters' />\r\n        <Menu.Item\r\n          content='All activities'\r\n          active={predicate.has('all')}\r\n          onClick={() => setPredicate('all', 'true')}\r\n        />\r\n        <Menu.Item\r\n          content=\"I'm Going\"\r\n          active={predicate.has('isGoing')}\r\n          onClick={() => setPredicate('isGoing', 'true')}\r\n        />\r\n        <Menu.Item\r\n          content=\"I'm hosting \"\r\n          active={predicate.has('isHost')}\r\n          onClick={() => setPredicate('isHost', 'true')}\r\n        />\r\n      </Menu>\r\n      <Header />\r\n      <Calendar\r\n        onChange={(date) => setPredicate('startDate', date as Date)}\r\n        value={predicate.get('startDate') || new Date()}\r\n      />\r\n    </>\r\n  )\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent } from 'react';\r\nimport { Button, Reveal } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function FollowButton({ profile }: Props) {\r\n    const { profileStore, userStore } = useStore();\r\n    const { updateFollowing, loading } = profileStore;\r\n\r\n    if (userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{ width: '100%' }}>\r\n                <Button\r\n                    fluid\r\n                    color='teal'\r\n                    content={profile.following ? 'Following' : 'Not following'}\r\n                />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: '100%' }}>\r\n                <Button\r\n                    fluid\r\n                    basic\r\n                    color={profile.following ? 'red' : 'green'}\r\n                    content={profile.following ? 'Unfollow' : 'Follow'}\r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})\r\n\r\n\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({ profile }: Props) {\r\n\r\n    function truncate(str: string | undefined) {\r\n        if (str) {\r\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n})\r\n\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Image, List, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/profile';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\ninterface Props {\r\n    attendees: Profile[]\r\n}\r\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\r\n\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    }\r\n\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                            <Image\r\n                                size='mini'\r\n                                src={attendee.image || '/assets/user.png'}\r\n                                circular\r\n                                bordered\r\n                                style={attendee.following ? styles : null}\r\n                            />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n\r\n            ))}\r\n        </List>\r\n    )\r\n})","import { format } from 'date-fns'\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react'\r\nimport { Activity } from '../../../app/models/activity'\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee'\r\n\r\ninterface Props {\r\n  activity: Activity;\r\n}\r\n\r\nfunction ActivityListItem({ activity }: Props) {\r\n  return (\r\n    <Segment.Group>\r\n      <Segment>\r\n        {activity.isCancelled &&\r\n          <Label attached='top' color='red' content='Cancelled' style={{ textAlign: 'center' }} />\r\n        }\r\n        <Item.Group>\r\n          <Item>\r\n            <Item.Image style={{ marginBottom: 3 }} size='tiny' circular src={activity.host?.image || 'assets/user.png'} />\r\n            <Item.Content>\r\n              <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                {activity.title}\r\n              </Item.Header>\r\n              <Item.Description>Hosted By <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link> </Item.Description>\r\n              {activity.isHost && (\r\n                <Item.Description>\r\n                  <Label basic color='orange'>\r\n                    You are hosting this activity\r\n                  </Label>\r\n                </Item.Description>\r\n              )}\r\n              {activity.isGoing && !activity.isHost && (\r\n                <Item.Description>\r\n                  <Label basic color='green'>\r\n                    You are going to this activity\r\n                  </Label>\r\n                </Item.Description>\r\n              )}\r\n            </Item.Content>\r\n          </Item>\r\n        </Item.Group>\r\n      </Segment>\r\n      <Segment>\r\n        <span>\r\n          <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n          <Icon name='marker' /> {activity.venue}\r\n        </span>\r\n      </Segment>\r\n      <Segment secondary>\r\n        <ActivityListItemAttendee attendees={activity.attendees!} />\r\n      </Segment>\r\n      <Segment clearing>\r\n        <span>\r\n          {activity.description}\r\n        </span>\r\n        <Button\r\n          as={Link}\r\n          to={`/activities/${activity.id}`}\r\n          color='teal'\r\n          floated='right'\r\n          content='view'\r\n        />\r\n      </Segment>\r\n    </Segment.Group>\r\n  )\r\n}\r\n\r\nexport default ActivityListItem\r\n","import React, { Fragment } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Header } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\n\r\nexport default observer(function ActivityList() {\r\n  const { activityStore } = useStore();\r\n  const { groupedActivities } = activityStore;\r\n\r\n  return (\r\n    <Fragment>\r\n      {groupedActivities.map(([group, activities]) => (\r\n        <Fragment key={group}>\r\n          <Header sub color='teal'>\r\n            {group}\r\n          </Header>\r\n          {activities.map(activity => (\r\n            <ActivityListItem key={activity.id} activity={activity} />\r\n          ))}\r\n        </Fragment>\r\n      ))}\r\n    </Fragment>\r\n  )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport ActivityList from './ActivityList';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport { observer } from 'mobx-react-lite';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\n\r\n\r\nexport default observer(function ActivityDashboard() {\r\n  const { activityStore } = useStore();\r\n  const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n  const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n  function handleGetNext() {\r\n    setLoadingNext(true);\r\n    setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n    loadActivities().then(() => setLoadingNext(false));\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (activityRegistry.size <= 1) //to avoid flickering\r\n      loadActivities();\r\n  }, [activityRegistry.size, loadActivities])\r\n\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width='10'>\r\n        {activityStore.loadingInitial && !loadingNext ?\r\n          (\r\n            <>\r\n              <ActivityListItemPlaceholder />\r\n              <ActivityListItemPlaceholder />\r\n            </>\r\n          ) :\r\n          (\r\n            <InfiniteScroll\r\n              pageStart={0}\r\n              loadMore={handleGetNext}\r\n              hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n              initialLoad={false}\r\n            >\r\n              <ActivityList />\r\n            </InfiniteScroll>\r\n          )\r\n        }\r\n      </Grid.Column>\r\n      <Grid.Column width='6'>\r\n        <ActivityFilters />\r\n      </Grid.Column>\r\n      <Grid.Column width='10'>\r\n        <Loader active={loadingNext} />\r\n      </Grid.Column>\r\n    </Grid>\r\n  )\r\n})","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n  placeholder: string;\r\n  name: string;\r\n  type?: string;\r\n  label?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n  const [field, meta] = useField(props.name);\r\n  return (\r\n    // !!meta.error  cast string to boolean\r\n    <Form.Field error={meta.touched && !!meta.error}>\r\n      <label>{props.label}</label>\r\n      <input {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <Label basic color='red'>{meta.error}</Label>\r\n      ) : null}\r\n    </Form.Field>\r\n  )\r\n}\r\n\r\n","\r\nimport { ErrorMessage, Form, Formik } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Button, Header, Label } from 'semantic-ui-react'\r\nimport MyTextInput from '../../app/common/form/MyTextInput'\r\nimport { useStore } from '../../app/stores/store'\r\n\r\nexport default observer(function LoginForm() {\r\n  const { userStore } = useStore();\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{ email: '', password: '', error: null }}\r\n      onSubmit={(values, { setErrors }) => userStore.login(values).catch(error =>\r\n        setErrors({ error: 'Invalid email or password' }))}\r\n    >\r\n      {({ handleSubmit, isSubmitting, errors }) => (\r\n        <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n          <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\r\n          <MyTextInput name='email' placeholder='Email' />\r\n          <MyTextInput name='password' placeholder='Password' type='password' />\r\n          <ErrorMessage name='error' render={() =>\r\n            <Label style={{ marginBottom: 10 }} basic color='red' content={errors.error} />}\r\n          />\r\n          <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n        </Form>\r\n      )}\r\n    </Formik >\r\n  )\r\n})\r\n\r\n","import React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n  errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({ errors }: Props) {\r\n  return (\r\n    <Message error>\r\n      {errors && (\r\n        <Message.List>\r\n          {errors.map((err: any, i: any) => (\r\n            <Message.Item key={i}>{err}</Message.Item>\r\n          ))}\r\n        </Message.List>\r\n      )}\r\n    </Message>\r\n  )\r\n}","\r\nimport { ErrorMessage, Form, Formik } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Button, Header } from 'semantic-ui-react'\r\nimport MyTextInput from '../../app/common/form/MyTextInput'\r\nimport { useStore } from '../../app/stores/store'\r\nimport * as Yup from 'yup'\r\nimport ValidationErrors from '../errors/ValidationErrors'\r\n\r\nexport default observer(function RegisterForm() {\r\n    const { userStore } = useStore();\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ displayName: '', username: '', email: '', password: '', error: null }}\r\n            onSubmit={(values, { setErrors }) => userStore.register(values).catch(error =>\r\n                setErrors({ error }))}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextInput name='username' placeholder='Username' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage name='error' render={() =>\r\n                        <ValidationErrors errors={errors.error} />}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting}\r\n                        loading={isSubmitting} positive content='Register' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik >\r\n    )\r\n})\r\n\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport GoogleLogin from 'react-google-login';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Container, Divider, Header, Image, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nexport default observer(function HomePage() {\r\n  const { userStore, modalStore } = useStore();\r\n\r\n  return (\r\n    <Segment inverted textAlign='center' vertical className='masthead' >\r\n      <Container text>\r\n        <Header as='h1' inverted >\r\n          <Image size='massive' src='/assets/logo.png'\r\n            alt='logo' style={{ marginBottom: 12 }} />\r\n            Home Page\r\n        </Header>\r\n        {userStore.isLoggedIn ?\r\n          (\r\n            <>\r\n              <Header as='h2' inverted>Reactivities</Header>\r\n              <Button as={Link} to={'/activities'} size='huge' inverted>\r\n                Go to Avtivities !\r\n              </Button>\r\n            </>\r\n          ) :\r\n          (\r\n            <>\r\n              <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                Login!\r\n              </Button>\r\n              <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                Register!\r\n              </Button>\r\n              <Divider horizontal inverted>Or</Divider>\r\n              {/* <GoogleLogin\r\n                clientId=\"ac164us866id6vaq1t.apps.googleusercontent.com\"\r\n                buttonText=\"Login with Google\"\r\n                onSuccess={responseGoogle}\r\n                onFailure={responseGoogle}\r\n              ></GoogleLogin> */}\r\n            </>\r\n          )\r\n        }\r\n      </Container>\r\n    </Segment>\r\n  )\r\n})\r\n","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n  inverted?: boolean;\r\n  content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({ inverted = true, content = 'Loading...' }: Props) {\r\n  return (\r\n    <Dimmer active={true} inverted={inverted}>\r\n      <Loader content={content} size='massive' />\r\n    </Dimmer>\r\n  )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n  placeholder: string;\r\n  name: string;\r\n  rows: number;\r\n  label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n  const [field, meta] = useField(props.name);\r\n  return (\r\n    // !!meta.error  cast string to boolean\r\n    <Form.Field error={meta.touched && !!meta.error}>\r\n      <label>{props.label}</label>\r\n      <textarea {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <Label basic color='red'>{meta.error}</Label>\r\n      ) : null}\r\n    </Form.Field>\r\n  )\r\n}\r\n\r\n","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n  placeholder: string;\r\n  name: string;\r\n  options: any;\r\n  label?: string;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n  const [field, meta, helpers] = useField(props.name);\r\n  return (\r\n    // !!meta.error  cast string to boolean\r\n    <Form.Field error={meta.touched && !!meta.error}>\r\n      <label>{props.label}</label>\r\n      <Select\r\n        clearable\r\n        options={props.options}\r\n        value={field.value || null}\r\n        onChange={(event, data) => helpers.setValue(data.value)}\r\n        onBlur={() => helpers.setTouched(true)}\r\n        placeholder={props.placeholder}\r\n      />\r\n      {meta.touched && meta.error ? (\r\n        <Label basic color='red'>{meta.error}</Label>\r\n      ) : null}\r\n    </Form.Field>\r\n  )\r\n}\r\n\r\n","export const CategoryOptions = [\r\n  { text: 'Drinks', value: 'drinks' },\r\n  { text: 'Culture', value: 'culture' },\r\n  { text: 'Film', value: 'film' },\r\n  { text: 'Food', value: 'food' },\r\n  { text: 'Music', value: 'music' },\r\n  { text: 'Travel', value: 'travel' },\r\n]","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, { ReactDatePickerProps } from 'react-datepicker';\r\n\r\n// Partial type makes all properties optional\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n  const [field, meta, helpers] = useField(props.name!);\r\n  return (\r\n    <Form.Field error={meta.touched && !!meta.error}>\r\n      <DatePicker\r\n        {...field}\r\n        {...props}\r\n        selected={(field.value && new Date(field.value)) || null}\r\n        onChange={value => helpers.setValue(value)}\r\n      />\r\n      {meta.touched && meta.error ? (\r\n        <Label basic color='red'>{meta.error}</Label>\r\n      ) : null}\r\n    </Form.Field>\r\n  )\r\n}\r\n\r\n\r\n","import { observer } from 'mobx-react-lite';\r\nimport { useEffect, useState } from 'react';\r\nimport { useHistory, useParams } from 'react-router';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Link } from 'react-router-dom';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport { CategoryOptions } from '../../../app/common/options/CategoryOptions';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport { ActivityFormValues } from '../../../app/models/activity';\r\n\r\nexport default observer(function ActivityForm() {\r\n  const history = useHistory();  //for redirection\r\n  const { activityStore } = useStore();\r\n  const { createActivity, updateActivity,\r\n    loadActivity, loadingInitial } = activityStore;\r\n  const { id } = useParams<{ id: string }>();\r\n\r\n  const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n  const validationSchema = Yup.object({\r\n    title: Yup.string().required('The activity title is required'),\r\n    description: Yup.string().required('The activity description is required'),\r\n    category: Yup.string().required(),\r\n    date: Yup.string().required('Date is required').nullable(),\r\n    venue: Yup.string().required(),\r\n    city: Yup.string().required()\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)));\r\n  }, [id, loadActivity]);\r\n\r\n  function handleFormSubmit(activity: ActivityFormValues) {\r\n    if (!activity.id) {\r\n      let newActivity = {\r\n        ...activity,\r\n        id: uuid()\r\n      }\r\n      createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`));\r\n    } else {\r\n      updateActivity(activity).then(() => history.push(`/activities/${activity.id}`));\r\n    }\r\n  }\r\n\r\n  if (loadingInitial) return <LoadingComponent content='Loading activity...' />\r\n  return (\r\n    <Segment clearing>\r\n      <Header content='Activity Details' sub color='teal' />\r\n      <Formik\r\n        validationSchema={validationSchema}\r\n        enableReinitialize\r\n        initialValues={activity}\r\n        onSubmit={values => handleFormSubmit(values)}>\r\n        {\r\n          ({ handleSubmit, isValid, isSubmitting, dirty }) =>\r\n          (<Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n            <MyTextInput name='title' placeholder='Title' />\r\n            <MyTextArea rows={3} placeholder='Description' name='description' />\r\n            <MySelectInput options={CategoryOptions} placeholder='Category' name='category' />\r\n            <MyDateInput\r\n              placeholderText='Date'\r\n              name='date'\r\n              showTimeSelect\r\n              timeCaption='time'\r\n              dateFormat='MMMM d, yyyy h:mm aa'\r\n            />\r\n            <Header content='Location  Details' sub color='teal' />\r\n            <MyTextInput placeholder='City' name='city' />\r\n            <MyTextInput placeholder='Venue' name='venue' />\r\n            <Button\r\n              disabled={isSubmitting || !dirty || !isValid}\r\n              loading={isSubmitting} floated='right'\r\n              positive type='submit' content='Submit'\r\n            />\r\n            <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n          </Form>)\r\n        }\r\n      </Formik>\r\n    </Segment>\r\n  )\r\n})","import { Field, FieldProps, Form, Formik } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport * as Yup from 'yup'\r\nimport { formatDistanceToNow } from 'date-fns'\r\n\r\ninterface Props {\r\n  activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n  const { commentStore } = useStore();\r\n\r\n  useEffect(() => {\r\n    if (activityId) {\r\n      commentStore.createHubConnection(activityId);\r\n    }\r\n    return () => {\r\n      commentStore.clearComments();\r\n    }\r\n  }, [commentStore, activityId]);\r\n\r\n  return (\r\n    <>\r\n      <Segment\r\n        textAlign='center'\r\n        attached='top'\r\n        inverted\r\n        color='teal'\r\n        style={{ border: 'none' }}\r\n      >\r\n        <Header>Chat about this event</Header>\r\n      </Segment>\r\n      <Segment attached clearing>\r\n        <Formik\r\n          onSubmit={(values, { resetForm }) =>\r\n            commentStore.addComment(values).then(() => resetForm())}\r\n          initialValues={{ body: '' }}\r\n          validationSchema={Yup.object({\r\n            body: Yup.string().required()\r\n          })}\r\n        >\r\n          {({ isSubmitting, isValid, handleSubmit }) => (\r\n            <Form className='ui form'>\r\n              <Field name='body'>\r\n                {(props: FieldProps) => (\r\n                  <div style={{ position: 'relative' }}>\r\n                    <Loader active={isSubmitting} />\r\n                    <textarea\r\n                      placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\r\n                      rows={2}\r\n                      {...props.field}\r\n                      onKeyPress={e => {\r\n                        if (e.key === 'Enter' && e.shiftKey) {\r\n                          return;\r\n                        }\r\n                        if (e.key === 'Enter' && !e.shiftKey) {\r\n                          e.preventDefault();\r\n                          isValid && handleSubmit();\r\n                        }\r\n                      }}\r\n                    />\r\n                  </div>\r\n                )}\r\n              </Field>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n        <Comment.Group>\r\n          {commentStore.comments.map(comment => (\r\n            <Comment key={comment.id}>\r\n              <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n              <Comment.Content>\r\n                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\r\n                  {comment.displayName}\r\n                </Comment.Author>\r\n                <Comment.Metadata>\r\n                  <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                </Comment.Metadata>\r\n                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n              </Comment.Content>\r\n            </Comment>\r\n          ))}\r\n        </Comment.Group>\r\n      </Segment>\r\n    </>\r\n\r\n  )\r\n})\r\n","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n  filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n  position: 'absolute',\r\n  bottom: '5%',\r\n  left: '5%',\r\n  width: '100%',\r\n  height: 'auto',\r\n  color: 'white'\r\n};\r\n\r\ninterface Props {\r\n  activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n  const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\r\n\r\n  return (\r\n    <Segment.Group>\r\n      <Segment basic attached='top' style={{ padding: '0' }}>\r\n        {activity.isCancelled &&\r\n          <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\r\n            ribbon color='red' content='Cancelled' />\r\n        }\r\n        <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n        <Segment style={activityImageTextStyle} basic>\r\n          <Item.Group>\r\n            <Item>\r\n              <Item.Content>\r\n                <Header\r\n                  size='huge'\r\n                  content={activity.title}\r\n                  style={{ color: 'white' }}\r\n                />\r\n                <p>{format(activity.date!, 'dd MMM yyyy h:mm aa')}</p>\r\n                <p>\r\n                  Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\r\n                </p>\r\n              </Item.Content>\r\n            </Item>\r\n          </Item.Group>\r\n        </Segment>\r\n      </Segment>\r\n      <Segment clearing attached='bottom'>\r\n        {activity.isHost ?\r\n          (\r\n            <>\r\n              <Button\r\n                color={activity.isCancelled ? 'green' : 'red'}\r\n                floated='left'\r\n                basic\r\n                content={activity.isCancelled ? 'Re-activate Avtivity' : 'Cancel Activity'}\r\n                onClick={cancelActivityToggle}\r\n                loading={loading}\r\n              />\r\n              <Button\r\n                disabled={activity.isCancelled}\r\n                as={Link}\r\n                to={`/manage/${activity.id}`}\r\n                color='orange'\r\n                floated='right'>\r\n                Manage Event\r\n              </Button>\r\n            </>\r\n          ) : activity.isGoing ?\r\n            (<Button\r\n              loading={loading}\r\n              onClick={updateAttendance}>\r\n              Cancel attendance\r\n            </Button>)\r\n            :\r\n            (<Button\r\n              disabled={activity.isCancelled}\r\n              loading={loading}\r\n              onClick={updateAttendance}\r\n              color='teal'>\r\n              Join Activity\r\n            </Button>)\r\n        }\r\n      </Segment>\r\n    </Segment.Group>\r\n  )\r\n})\r\n","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\n\r\ninterface Props {\r\n  activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({ activity }: Props) {\r\n  return (\r\n    <Segment.Group>\r\n      <Segment attached='top'>\r\n        <Grid>\r\n          <Grid.Column width={1}>\r\n            <Icon size='large' color='teal' name='info' />\r\n          </Grid.Column>\r\n          <Grid.Column width={15}>\r\n            <p>{activity.description}</p>\r\n          </Grid.Column>\r\n        </Grid>\r\n      </Segment>\r\n      <Segment attached>\r\n        <Grid verticalAlign='middle'>\r\n          <Grid.Column width={1}>\r\n            <Icon name='calendar' size='large' color='teal' />\r\n          </Grid.Column>\r\n          <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n          </Grid.Column>\r\n        </Grid>\r\n      </Segment>\r\n      <Segment attached>\r\n        <Grid verticalAlign='middle'>\r\n          <Grid.Column width={1}>\r\n            <Icon name='marker' size='large' color='teal' />\r\n          </Grid.Column>\r\n          <Grid.Column width={11}>\r\n            <span>{activity.venue}, {activity.city}</span>\r\n          </Grid.Column>\r\n        </Grid>\r\n      </Segment>\r\n    </Segment.Group>\r\n  )\r\n})\r\n","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n  activity: Activity\r\n}\r\nexport default observer(function ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\r\n  if (!attendees) return null;\r\n  return (\r\n    <>\r\n      <Segment\r\n        textAlign='center'\r\n        style={{ border: 'none' }}\r\n        attached='top'\r\n        secondary\r\n        inverted\r\n        color='teal'\r\n      >\r\n        {attendees.length} {attendees.length === 1 ? 'Person' : 'People'}\r\n      </Segment>\r\n      <Segment attached>\r\n        <List relaxed divided>\r\n          {attendees.map(attendee => (\r\n            <Item style={{ position: 'relative' }} key={attendee.username}>\r\n              {attendee.username === host?.username && (\r\n                <Label\r\n                  style={{ position: 'absolute' }}\r\n                  color='orange'\r\n                  ribbon='right'\r\n                >\r\n                  Host\r\n                </Label>\r\n              )}\r\n              <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n              <Item.Content verticalAlign='middle'>\r\n                <Item.Header as='h3'>\r\n                  <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                </Item.Header>\r\n                {attendee.following &&\r\n                  <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n              </Item.Content>\r\n            </Item>\r\n          ))}\r\n        </List>\r\n      </Segment>\r\n    </>\r\n\r\n  )\r\n})\r\n\r\n\r\n\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\n\r\nexport default observer(function ActivityDetails() {\r\n  const { activityStore } = useStore();\r\n  const { selectedActivity: activity, loadActivity,\r\n    loadingInitial, clearSelectedActivity } = activityStore;\r\n\r\n  const { id } = useParams<{ id: string }>();\r\n\r\n  useEffect(() => {\r\n    if (id) loadActivity(id);\r\n    return () => clearSelectedActivity();\r\n  }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n  if (loadingInitial || !activity) return <LoadingComponent />;\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width='10'>\r\n        <ActivityDetailedHeader activity={activity} />\r\n        <ActivityDetailedInfo activity={activity} />\r\n        <ActivityDetailedChat activityId={activity.id} />\r\n      </Grid.Column>\r\n      <Grid.Column width='6'>\r\n        <ActivityDetailedSidebar activity={activity!} />\r\n      </Grid.Column>\r\n    </Grid>\r\n  )\r\n})","import React, { useState } from 'react';\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + '/buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + '/buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + '/buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + '/buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + '/activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + '/activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors &&\r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\n\r\nexport default function NotFound() {\r\n  return (\r\n    <Segment placeholder>\r\n      <Header icon>\r\n        <Icon name='search' />\r\n                Oops - we've looked everywhere and could not find this.\r\n      </Header>\r\n      <Segment.Inline>\r\n        <Button as={Link} to='/activities' primary>\r\n          Return to activities page\r\n        </Button>\r\n      </Segment.Inline>\r\n    </Segment>\r\n  )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function ServerError() {\r\n  const { commonStore } = useStore();\r\n\r\n  return (\r\n    <Container>\r\n      <Header as='h1' content='Server Error' />\r\n      <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n      {commonStore.error?.details &&\r\n        <Segment>\r\n          <Header as='h4' content='Stack Trace' color='teal' />\r\n          <code style={{ marginTop: '10px' }}>{commonStore.error.details}</code>\r\n        </Segment>\r\n      }\r\n    </Container>\r\n  )\r\n})\r\n","import { observer } from \"mobx-react-lite\";\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\nexport default observer(function ModalContainer() {\r\n    const { modalStore } = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\n\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\n\r\nexport default observer(function ProfileEditForm({ setEditMode }: Props) {\r\n    const { profileStore: { profile, updateProfile } } = useStore();\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ displayName: profile?.displayName, bio: profile?.bio }}\r\n            onSubmit={values => { updateProfile(values).then(() => { setEditMode(false); }) }}\r\n            validationSchema={Yup.object({ displayName: Yup.string().required() })}\r\n        >\r\n            {({ isSubmitting, isValid, dirty }) => (\r\n                <Form className='ui form'>\r\n                    <MyTextInput placeholder='Display Name' name='displayName' />\r\n                    <MyTextArea rows={10} placeholder='Add your bio' name='bio' />\r\n                    <Button\r\n                        positive\r\n                        type='submit'\r\n                        loading={isSubmitting}\r\n                        content='Update profile'\r\n                        floated='right'\r\n                        disabled={!isValid || !dirty}\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React, { useState } from 'react';\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport { Button, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport default observer(function ProfileAbout() {\r\n    const { profileStore } = useStore();\r\n    const { isCurrentUser, profile } = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    {editMode ?\r\n                        <ProfileEditForm setEditMode={setEditMode} /> :\r\n                        <span style={{ whiteSpace: 'pre-wrap' }}>{profile?.bio}</span>\r\n                    }\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React, { SyntheticEvent, useEffect } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { UserActivity } from '../../app/models/profile';\r\nimport { format } from 'date-fns';\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n];\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore } = useStore();\r\n    const { loadUserActivities, profile, loadingActivities, userActivities } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as\r\n            number].pane.key);\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card as={Link} to={`/activities/${activity.id}`} key={activity.id}>\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});","import { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store'\r\nimport ProfileCard from './ProfileCard';\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const { profileStore } = useStore();\r\n    const { profile, followings, loadingFollowings, activeTab } = profileStore;\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header\r\n                        floated='left'\r\n                        icon='user'\r\n                        content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile =>\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        )}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})\r\n\r\n\r\n","import React from 'react';\r\nimport { Cropper } from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({ imagePreview, setCropper }: Props) {\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{ height: 200, width: '100%' }}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.image-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}\r\n\r\n\r\n","import React, { useCallback } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { Header, Icon } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({ setFiles }: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n    }, [setFiles])\r\n\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? { ...dzStyles, ...dzActive } : dzStyles} >\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size='huge' />\r\n            <Header content='Drop image here' />\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Button, Grid, Header } from 'semantic-ui-react';\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({ loading, uploadPhoto }: Props) {\r\n\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    //for disposing URL.createObjectURL(file)\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview));\r\n        }\r\n    }, [files]);\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize Image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 &&\r\n                    <>\r\n                        <div className='image-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\n\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent, useState } from 'react';\r\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react';\r\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\r\nimport { Photo, Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto,\r\n        uploading, loading, setMainPhoto, deletePhoto } } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);      //local state\r\n    const [target, setTarget] = useState('');         //to set loading for one button at a time\r\n\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, event: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(event.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, event: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(event.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button floated='right' basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(photo => (\r\n                                <Card key={photo.id} >\r\n                                    <Image src={photo.url || '/assets/user.png'} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button\r\n                                                basic\r\n                                                color='green'\r\n                                                content='Main'\r\n                                                name={'main' + photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === 'main' + photo.id && loading}\r\n                                                onClick={event => handleSetMainPhoto(photo, event)}\r\n                                            />\r\n                                            <Button\r\n                                                basic\r\n                                                color='red'\r\n                                                icon='trash'\r\n                                                name={photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === photo.id && loading}\r\n                                                onClick={event => handleDeletePhoto(photo, event)}\r\n                                            />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n\r\n        </Tab.Pane>\r\n    )\r\n})\r\n\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileAbout from './ProfileAbout';\r\nimport ProfileActivities from './ProfileActivities';\r\nimport ProfileFollowings from './ProfileFollowings';\r\nimport ProfilePhotos from './ProfilePhotos';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({ profile }: Props) {\r\n    const { profileStore } = useStore();\r\n\r\n    const panes = [\r\n        { menuItem: 'About', render: () => <ProfileAbout /> },\r\n        { menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} /> },\r\n        { menuItem: 'Events', render: () => <ProfileActivities /> },\r\n        { menuItem: 'Followers', render: () => <ProfileFollowings /> },\r\n        { menuItem: 'Following', render: () => <ProfileFollowings /> },\r\n    ]\r\n\r\n    return (\r\n        <Tab\r\n            menu={{ fluid: true, vertical: true }}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})\r\n\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({ profile }: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})\r\n\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileContent from './ProfileContent';\r\nimport ProfileHeader from './ProfileHeader';\r\n\r\nexport default observer(function ProfilePage() {\r\n    const { username } = useParams<{ username: string }>();  //get username from url\r\n    const { profileStore } = useStore();\r\n    const { loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab]);\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />\r\n                    </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})\r\n","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({ component: Component, ...rest }: Props) {\r\n    const { userStore: { isLoggedIn } } = useStore();\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import React, { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/AcitivityDetails';\nimport { Route, Switch, useLocation } from 'react-router';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport { observer } from 'mobx-react-lite';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\n\nexport default observer(function App() {\n  //for changing components\n  const location = useLocation();\n  const { commonStore, userStore } = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore]);\n\n\n  if (!commonStore.appLoaded)\n    return <LoadingComponent content='Loading app...' />\n\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'/(.+)'}   //any root that match /... is gonna match \n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }} >\n              <Switch>\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                <PrivateRoute path='/errors' component={TestErrors} />\n                <Route path='/server-error' component={ServerError} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n    </>\n  );\n})","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n    const { pathname } = useLocation();\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, [pathname]);\r\n\r\n    return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css'\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}